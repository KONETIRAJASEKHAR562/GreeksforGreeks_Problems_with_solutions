Top K Frequent Elements in Array - |
Given a non-empty array nums[] of integers of length N, find the top k elements which have the highest frequency in the array. If two numbers have same frequencies, then the larger number should be given more preference.

Example 1:

Input:
N = 6
nums = {1,1,1,2,2,3}
k = 2
Output: {1, 2}
Example 2:

Input:
N = 8
nums = {1,1,2,2,3,3,3,4}
k = 2
Output: {3, 2}
Explanation: Elements 1 and 2 have the
same frequency ie. 2. Therefore, in this
case, the answer includes the element 2
as 2 > 1.

User Task:
You don't have to read or print anything. You will have to complete the function topK() that takes an array nums[] and integer k as input and returns a list of top k most frequent elements. If any two elements have same frequencies, then give more preference to the larger elemet.

Expected Time Complexity : O(NlogN)
Expected Auxilliary Space : O(N)

Constraints:
1 <= N <= 105
1<= nums[i] <=105
1 <= k <= N



class Check{
    int value;
    int frequency;
    public Check(int value,int frequency){
        this.value = value;
        this.frequency = frequency;
    }
}

class Solution {
    public int[] topK(int[] nums, int k) {
        
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i], map.get(nums[i])+1);        
            }else{
                map.put(nums[i],1);
            }
        }
        PriorityQueue<Check> pq = new PriorityQueue<>(new Comparator<Check>(){
            @Override
            public int compare(Check a,Check b){
                if(a.frequency == b.frequency){
                    return b.value - a.value;
                }else{
                    return b.frequency - a.frequency;
                }
            }
        });
        
        map.forEach((e1,e2)->{
            pq.add(new Check(e1,e2));
        });
        int ans[] = new int[k];
        for(int i=0;i<k;i++){
            ans[i] = pq.poll().value;
        }
        return ans;
    }
}
